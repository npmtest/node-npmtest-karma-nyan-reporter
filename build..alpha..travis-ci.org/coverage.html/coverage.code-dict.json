{"/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/test.js":"/* istanbul instrument in package npmtest_karma_nyan_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/lib.npmtest_karma_nyan_reporter.js":"/* istanbul instrument in package npmtest_karma_nyan_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_nyan_reporter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_nyan_reporter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-nyan-reporter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_nyan_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_nyan_reporter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_nyan_reporter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_karma_nyan_reporter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_nyan_reporter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_karma_nyan_reporter.__dirname + '/lib.npmtest_karma_nyan_reporter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/index.js":"/*jshint -W030 */\n(function() {\n  'use strict';\n  var NyanCat = require('./lib/nyanCat').NyanCat;\n\n  NyanCat.$inject = ['baseReporterDecorator', 'formatError', 'config'];\n\n  module.exports = {\n    'reporter:nyan': ['type', NyanCat]\n  };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/lib/nyanCat.js":"'use strict';\n\nvar dataStore = require('./data/store');\nvar dataTypes = require('./data/types');\nvar drawUtil = require('./util/draw');\nvar printers = require('./util/printers');\nvar rainbowifier = require('./util/rainbowifier');\nvar shellUtil = require('./util/shell').getInstance();\nvar fs = require('fs');\n\n/**\n * NyanCat constructor\n */\n\nfunction NyanCat(baseReporterDecorator, formatError, config) {\n  var self = this;\n  var defaultOptions = function() {\n    return {\n      suppressErrorReport: false,\n      suppressErrorHighlighting: false,\n      numberOfRainbowLines: 4,\n      renderOnRunCompleteOnly: false\n    };\n  };\n\n  self.options = defaultOptions();\n\n  if (config && config.nyanReporter) {\n    // merge defaults\n    Object.keys(self.options).forEach(function(optionName){\n      if (config.nyanReporter.hasOwnProperty(optionName)) {\n        self.options[optionName] = config.nyanReporter[optionName];\n      }\n    });\n  }\n\n  self.adapters = [fs.writeSync.bind(fs.writeSync, 1)];\n  dataTypes.setErrorFormatterMethod(formatError);\n\n  if (self.options.suppressErrorHighlighting) {\n    dataTypes.suppressErrorHighlighting();\n  }\n}\n\n\nNyanCat.prototype.reset = function() {\n  var numOfLines = this.options.numberOfRainbowLines;\n\n  this.allResults = {};\n  this._browsers = [];\n  this.browser_logs = {};\n  this.browserErrors = [];\n  this.colorIndex = 0;\n  this.dataStore = dataStore.getInstance();\n  this.drawUtil = drawUtil.getInstance(numOfLines);\n  this.rainbowifier = rainbowifier.getInstance();\n  this.stats = {};\n\n  this.totalTime = 0;\n  this.numberOfSlowTests = 0;\n};\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\n\nNyanCat.prototype.draw = function(appendOnly){\n  this.drawUtil.appendRainbow(this.rainbowifier);\n  if (!appendOnly) {\n    this.drawUtil.drawScoreboard(this.stats);\n    this.drawUtil.drawRainbow();\n    this.drawUtil.drawNyanCat(this.stats);\n  }\n  this.drawUtil.tick = !this.drawUtil.tick;\n};\n\n\n\n/*******************************************************/\n/*************** Karma LifeCycle Mehtods ***************/\n/*******************************************************/\n\n/**\n * onRunStart - karma api method\n *\n * called at the beginning of each test run\n */\n\nNyanCat.prototype.onRunStart = function (browsers) {\n  shellUtil.cursor.hide();\n  this.reset();\n  this.numberOfBrowsers = (browsers || []).length;\n  printers.write('\\n');\n};\n\n/**\n * onBrowserLog - karma api method\n *\n * called each time a browser encounters a\n * console message (console.log, console.info, etc...)\n */\n\nNyanCat.prototype.onBrowserLog = function(browser, log) {\n  if (!this.browser_logs[browser.id]) {\n    this.browser_logs[browser.id] = {\n      name: browser.name,\n      log_messages: []\n    };\n  }\n\n  this.browser_logs[browser.id].log_messages.push(log);\n};\n\n/**\n * onSpecComplete - karma api method\n *\n * called when each test finishes\n */\n\nNyanCat.prototype.onSpecComplete = function(browser, result) {\n  // don't pollute original object\n  this.stats = Object.create(browser.lastResult);\n\n  // sum up tests stats\n  var testStats = {\n    success: 0,\n    failed: 0,\n    skipped: 0,\n    total: 0\n  };\n\n  var matched = this._browsers.some(function(br, idx, all) {\n    if (all[idx].id === browser.id) {\n      return all.splice(idx, 1, browser);\n    }\n  });\n\n  if (!matched) {\n    this._browsers.push(browser);\n  }\n\n  this._browsers.forEach(function(br) {\n    Object.keys(testStats).forEach(function(prop) {\n      testStats[prop] += br.lastResult[prop];\n    });\n  });\n\n  var self = this;\n  Object.keys(testStats).forEach(function (prop) {\n    self.stats[prop] = testStats[prop];\n  });\n\n  if (!this.options.suppressErrorReport) {\n    this.dataStore.save(browser, result);\n  }\n\n  this.draw(this.options.renderOnRunCompleteOnly);\n};\n\n/**\n * onRunComplete - karma api method\n *\n * called either when a browser encounters\n * an error or when all tests have run\n */\n\nNyanCat.prototype.onRunComplete = function() {\n  this.draw();\n\n  if (this.browserErrors.length) {\n    printers.printRuntimeErrors(this.rainbowifier.rainbowify, this.browserErrors);\n  } else {\n    this.drawUtil.fillWithNewlines();\n    printers.printTestFailures(this.dataStore.getData(), this.options.suppressErrorReport);\n    printers.printStats(this.stats);\n    printers.printBrowserLogs(this.browser_logs);\n  }\n  shellUtil.cursor.show();\n};\n\n/**\n * onBrowserStart - karma api method\n *\n * called when each browser is launched\n */\n\nNyanCat.prototype.onBrowserStart = function (browser) {\n  this._browsers.push(browser);\n  this.numberOfBrowsers = this._browsers.length;\n};\n\n/**\n * onBrowserError - karma api method\n *\n * called when a browser encounters a compilation\n * error at runtime\n */\n\nNyanCat.prototype.onBrowserError = function(browser, error) {\n  this.browserErrors.push({'browser': browser, 'error': error});\n};\n\nexports.NyanCat = NyanCat;\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/lib/data/store.js":"'use strict';\n\nvar dt = require('./types');\n\n/**\n * DataStore - Class\n *\n * Used to create a data storage that persists for\n * the life of a test run. This class has several\n * helper methods to look up different data-types\n * and insert them if they don't already exists.\n *\n * An instance of this class is exported.\n */\n\nvar DataStore = function() {\n  var data = []; // This is an array of suites\n\n  this.getData = function() {\n    return data;\n  };\n};\n\nDataStore.prototype.save = function(browser, result) {\n  if (!result.success && !result.skipped && result.suite.length > 0) {\n    var suite = this.findSuiteInResult(result);\n\n    this.saveResultToSuite(suite, browser, result);\n  }\n};\n\nDataStore.prototype.saveResultToSuite = function(suite, browser, result) {\n  suite.tests = (!suite.tests) ? [] : suite.tests;\n  var test = this.findTestByName(suite.tests, result.description);\n  test.depth = suite.depth + 1;\n\n  var brwsr = this.findBrowserByName(test.browsers, browser.name);\n  brwsr.depth = test.depth + 1;\n\n  if(result.log && result.log[0] !== null){\n    brwsr.errors = result.log[0].split('\\n');\n  }\n};\n\nDataStore.prototype.findSuiteInResult = function(result) {\n  var suite, self = this;\n  var searchArray = self.getData();\n\n  result.suite.forEach(function(suiteName, i) {\n    suite = self.findSuiteByName(searchArray, suiteName);\n    suite.depth = i;\n\n    suite.suites = (!suite.suites) ? [] : suite.suites;\n    searchArray = suite.suites;\n  });\n\n  return suite;\n};\n\nDataStore.prototype.findByName = function(arr, name, Constructor) {\n  var it;\n  // Look through the array for an object with a\n  // 'name' property that matches the 'name' arg\n  arr.every(function(el) {\n    if (el.name === name) {\n      it = el;\n      return false;\n    }\n    return true;\n  });\n\n  // If a matching object is not found, create a\n  // new one and push it to the provided array\n  if (!it) {\n    it = new Constructor(name);\n    arr.push(it);\n  }\n\n  // return the object\n  return it;\n};\n\nDataStore.prototype.findSuiteByName = function(arr, name) {\n  return this.findByName(arr, name, dt.Suite);\n};\n\nDataStore.prototype.findTestByName = function(arr, name) {\n  return this.findByName(arr, name, dt.Test);\n};\n\nDataStore.prototype.findBrowserByName = function(arr, name) {\n  return this.findByName(arr, name, dt.Browser);\n};\n\nexports.getInstance = function() { return new DataStore(); };\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/lib/data/types.js":"'use strict';\n\nvar clc = require('cli-color');\n\n/*\n * Suites are the top level data structure\n * they can contain sub-suites and/or tests\n * sub-suites, would therefore be able to\n * contain their own sub-suites and/or tests\n */\n\n// Global properties\nvar counter = 0;\nvar tab = 3;\nvar tabs = function(depth) {\n  return clc.right(depth * tab + 1);\n};\n\nvar errorHighlightingEnabled = true;\n\nexports.suppressErrorHighlighting = function() {\n  errorHighlightingEnabled = false;\n};\n\nvar errorFormatterMethod = function(error) {\n  return error.replace(/(\\?.+?:)/, ':').trim();\n};\n\nexports.setErrorFormatterMethod = function(formatterMethod) {\n  errorFormatterMethod = formatterMethod;\n};\n\n/**\n * Suite - Class\n *\n * Stores info about the sub-suites and tests that\n * failed resulting from a test run.\n * Knows how to output itself to a string.\n */\n\nfunction Suite(name) {\n  this.name = name.trim();\n  this.depth = 0;\n  this.suites = [];\n  this.tests = [];\n}\n\nSuite.prototype.toString = function() {\n  var out = [];\n\n  if (this.depth === 0) {\n    out.push(tabs(this.depth) + clc.white.underline(this.name));\n  } else {\n    out.push(tabs(this.depth) + clc.white(this.name));\n  }\n\n  this.tests.forEach(function(test) {\n    out.push(test.toString().trim());\n    out.push('');\n  });\n\n  this.suites.forEach(function(suite) {\n    out.push(suite.toString().trim());\n    out.push('');\n  });\n\n  out.push('');\n  out.push('');\n\n  out = out.join('\\n');\n\n  return out;\n};\n\n\n/**\n * Test - Class\n *\n * stores information about each tst failure\n * resulting from a test run.\n * Knows how to output itself to a string.\n */\n\nfunction Test(name) {\n  this.name = name.trim();\n  this.depth = 0;\n  this.browsers = [];\n}\n\nTest.prototype.toString = function() {\n  var out = [];\n\n  out.push(tabs(this.depth) + clc.red(this.name));\n\n  this.browsers.forEach(function(browser) {\n    out.push(browser.toString().trim());\n  });\n\n  return out.join('\\n');\n};\n\n\n/**\n * Browser - Class\n *\n * stores information for each browser failure\n * resulting from a test run.\n * Knows how to output itself to a string.\n */\n\nfunction Browser(name) {\n  this.name = name.trim();\n  this.depth = 0;\n  this.errors = [];\n}\n\nBrowser.prototype.toString = function() {\n  var depth = this.depth;\n  var out = [];\n\n  out.push(tabs(this.depth) + clc.yellow(this.name));\n\n  this.errors.forEach(function(error, i) {\n    error = error.trim();\n    if (i === 0) {\n      out.push(tabs(depth + 1) + (++counter) + ') ' + clc.redBright(error));\n    } else {\n\n      error = errorFormatterMethod(error).trim();\n\n      if (error.length) {\n        if (error.indexOf('node_modules/') < 0 && errorHighlightingEnabled) {\n          error = clc.black.bgRed(error);\n        } else {\n          error = clc.blackBright(error);\n        }\n        out.push(tabs(depth + 2) + error);\n      }\n    }\n  });\n\n  return out.join('\\n');\n};\n\nexports.Suite = Suite;\nexports.Test = Test;\nexports.Browser = Browser;\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/lib/util/draw.js":"'use strict';\n\nvar clc = require('cli-color');\nvar write = require('./printers').write;\nvar shell = require('./shell').getInstance();\n\nfunction DrawUtil(numOfLines) {\n  var width = shell.getWidth() * 0.75 | 0;\n  var maxHeight = shell.getHeight() - 1;\n\n  this.numberOfLines = Math.max(4, Math.min(numOfLines, maxHeight));\n  this.nyanCatWidth = 11;\n  this.scoreboardWidth = 5;\n  this.tick = 0;\n  this.trajectories = [];\n\n  for(var i = 0; i < this.numberOfLines; i++) {\n    this.trajectories[i] = [];\n  }\n\n  this.trajectoryWidthMax = (width - this.nyanCatWidth);\n\n  this.appendRainbow = function(rainbowifier){\n    var segment = this.tick ? '_' : '-';\n    var rainbowified = rainbowifier.rainbowify(segment);\n\n    for (var index = 0; index < this.numberOfLines; index++) {\n      var trajectory = this.trajectories[index];\n      if (trajectory.length >= this.trajectoryWidthMax) {\n        trajectory.shift();\n      }\n      trajectory.push(rainbowified);\n    }\n  };\n\n  this.drawScoreboard = function(stats) {\n    write(' ' + clc.yellow(stats.total) + '\\n');\n    write(' ' + clc.green(stats.success) + '\\n');\n    write(' ' + clc.red(stats.failed) + '\\n');\n    write(' ' + clc.cyan(stats.skipped) + '\\n');\n\n    this.fillWithNewlines(5);\n    this.cursorUp(this.numberOfLines);\n  };\n\n  this.drawRainbow = function(){\n    var self = this;\n\n    this.trajectories.forEach(function(line) {\n      write('\\u001b[' + self.scoreboardWidth + 'C');\n      write(line.join(''));\n      write('\\n');\n    });\n\n    this.cursorUp(this.numberOfLines);\n  };\n\n  this.drawNyanCat = function(stats) {\n    var startWidth = this.scoreboardWidth + this.trajectories[0].length;\n    var color = '\\u001b[' + startWidth + 'C';\n    var padding = '';\n\n    write(color);\n    write('_,------,');\n    write('\\n');\n\n    write(color);\n    padding = this.tick ? '  ' : '   ';\n    write('_|' + padding + '/\\\\_/\\\\ ');\n    write('\\n');\n\n    write(color);\n    padding = this.tick ? '_' : '__';\n    var tail = this.tick ? '~' : '^';\n    write(tail + '|' + padding + this.face(stats) + ' ');\n    write('\\n');\n\n    write(color);\n    padding = this.tick ? ' ' : '  ';\n    write(padding + '\"\"  \"\" ');\n    write('\\n');\n\n    this.fillWithNewlines(5);\n    this.cursorUp(this.numberOfLines);\n  };\n\n  this.face = function(stats) {\n    if (stats.failed) {\n      return '( x .x)';\n    } else if (stats.skipped) {\n      return '( o .o)';\n    } else if(stats.success) {\n      return '( ^ .^)';\n    } else {\n      return '( - .-)';\n    }\n  };\n\n  this.cursorUp = function(n) {\n    write(clc.up(n));\n  };\n\n  this.fillWithNewlines = function(startFrom) {\n    var i = startFrom ? startFrom : 0;\n\n    for(; i < this.numberOfLines + 1; i++) {\n      write('\\n');\n    }\n  };\n}\n\nexports.getInstance = function(numOfLines) {\n  return new DrawUtil(numOfLines);\n};\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/lib/util/printers.js":"'use strict';\n\nvar clc = require('cli-color');\n\n/**\n * printBrowserErrors - utility method\n *\n * relies on the reporter's context to print to the console\n * when a browser encounters a runtime compilation error\n */\n\nexports.printRuntimeErrors =\n  function printBrowserErrors(rainbowify, browserErrors) {\n    if (rainbowify && browserErrors)  {\n      var hashes = '##########'.split('');\n      var rainbowifyEach = function(val) {\n        write(rainbowify(val));\n      };\n      while (hashes.length > 0) {\n        hashes.forEach(rainbowifyEach);\n        write('\\n');\n        hashes.pop();\n      }\n      browserErrors.forEach(function(errorObj) {\n        write('\\n');\n        write(clc.red(errorObj.browser.name));\n        write('\\n');\n        write(clc.red(errorObj.error));\n        write('\\n');\n      });\n      write('\\n');\n      hashes.push('#');\n      while(hashes.length <= 10) {\n        hashes.forEach(rainbowifyEach);\n        write('\\n');\n        hashes.push('#');\n      }\n      write('\\n');\n    }\n  };\n\n/**\n * printTestFailures - utility method\n *\n * relies on the reporter's context to print to the console\n * on each test failure in the test suite\n */\n\nexports.printTestFailures =\n  function printTestFailures(failedSuites) {\n    if (failedSuites && failedSuites.length) {\n      write(clc.red(' Failed Tests:\\n'));\n      failedSuites.forEach(function(suite) {\n        write(suite.toString());\n      });\n    }\n  };\n\n/**\n * printStats\n *\n * prints the summary of the test run\n */\n\nexports.printStats =\n  function printStats(stats) {\n    var inc = 3;\n\n    write(clc.right(inc + 2));\n    write( clc.yellow(stats.total + ' total') );\n\n    write(clc.right(inc));\n    write(clc.green(stats.success + ' passed'));\n\n    write(clc.right(inc));\n    write(clc.red(stats.failed + ' failed'));\n\n    write(clc.right(inc));\n    write(clc.cyan(stats.skipped + ' skipped'));\n\n    write('\\n');\n    write('\\n');\n  };\n\n/**\n * printBrowserLogs\n *\n * prints the console messages encountered by the browser\n * during the test run (console.log, console.info, etc...)\n */\n\nexports.printBrowserLogs =\n  function printBrowserLogs(browser_logs) {\n    var printMsg = function(msg) {\n      write('    ');\n      write(clc.cyan(msg));\n      write('\\n');\n    };\n\n    for (var browser in browser_logs) {\n      write(' LOG MESSAGES FOR: ' + browser_logs[browser].name + ' INSTANCE #: ' + browser + '\\n');\n      browser_logs[browser].log_messages.forEach(printMsg);\n    }\n\n    write('\\n');\n  };\n\n/**\n * write - utility method\n *\n * simple proxy of process.stdout.write\n */\n\nvar write =\n      exports.write =\n        function write(string) {\n          process.stdout.write(string);\n        };\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/lib/util/shell.js":"'use strict';\nvar write = require('./printers').write;\nvar stdout = process.stdout;\nvar isTTY = stdout.isTTY;\nvar useStdout = isTTY && stdout.getWindowSize;\n\nvar ShellUtility = function() {\n  var self = this;\n  var winSize = useStdout ? stdout.getWindowSize(1) : [75, 4];\n\n  this.getWidth = function() {\n    return winSize[0];\n  };\n\n  this.getHeight = function() {\n    return winSize[1];\n  };\n\n  this.cursor = {\n    hide: function(){\n      isTTY && write('\\u001b[?25l');\n    },\n\n    show: function(){\n      isTTY && write('\\u001b[?25h');\n    },\n\n    deleteLine: function(){\n      isTTY && write('\\u001b[2K');\n    },\n\n    beginningOfLine: function(){\n      isTTY && write('\\u001b[0G');\n    },\n\n    CR: function(){\n      if (isTTY) {\n        self.cursor.deleteLine();\n        self.cursor.beginningOfLine();\n      } else {\n        write('\\n');\n      }\n    }\n  };\n};\n\nexports.getInstance = function() { return new ShellUtility(); };\n","/home/travis/build/npmtest/node-npmtest-karma-nyan-reporter/node_modules/karma-nyan-reporter/lib/util/rainbowifier.js":"'use strict';\n\nvar rainbowColors = generateColors();\n\nfunction Rainbowifier() {\n\n  var colorIndex = 0;\n\n  /**\n   * Apply rainbow to the given `str`.\n   *\n   * @param {String} str\n   * @return {String}\n   * @api private\n   */\n\n  this.rainbowify =\n        exports.rainbowify =\n          function rainbowify(str) {\n            var color = rainbowColors[colorIndex % rainbowColors.length];\n            colorIndex += 1;\n            return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';\n          };\n}\n\nexports.getInstance = function() { return new Rainbowifier(); };\n\n\n/**\n * Generate rainbow colors.\n *\n * @return {Array}\n * @api private\n */\n\nfunction generateColors() {\n  var colors = [];\n\n  for (var i = 0; i < (6 * 7); i++) {\n    var pi3 = Math.floor(Math.PI / 3);\n    var n = (i * (1.0 / 6));\n    var r = Math.floor(3 * Math.sin(n) + 3);\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);\n    colors.push(36 * r + 6 * g + b + 16);\n  }\n\n  return colors;\n}\n"}